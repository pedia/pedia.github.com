<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Distributed file system | HeartOutside]]></title>
  <link href="http://log.heartoutside.com/blog/categories/distributed-file-system/atom.xml" rel="self"/>
  <link href="http://log.heartoutside.com/"/>
  <updated>2012-04-25T16:57:03+08:00</updated>
  <id>http://log.heartoutside.com/</id>
  <author>
    <name><![CDATA[Ken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[分布式文件系统 GlusterFS]]></title>
    <link href="http://log.heartoutside.com/blog/2010/06/12/distributed-file-system-glusterfs/"/>
    <updated>2010-06-12T10:04:00+08:00</updated>
    <id>http://log.heartoutside.com/blog/2010/06/12/distributed-file-system-glusterfs</id>
    <content type="html"><![CDATA[<h2>文档</h2>

<p>http://gluster.com/community/documentation/index.php/Gluster_Storage_Platform<br />
http://gluster.com/community/documentation/index.php/GlusterFS_cookbook<br />
最好的文档应该是git中的 user-guide.pdf<br /></p>

<h2>代码</h2>

<p>git clone git://git.gluster.com/glusterfs.git<br />
貌似在gnu还有一份拷贝，但是似乎两个版本有细微差距<br />
GlusterFS 能使用 libibverbs，下载地址在 http://www.openfabrics.org/downloads/verbs/ <br /></p>

<p>对应于 configure 的结果中的  Infiniband verbs<br />
<code>
FUSE client        : yes
Infiniband verbs   : no
epoll IO multiplex : yes
argp-standalone    : no
fusermount         : no
</code></p>

<h2>优点</h2>

<p>1 结构清晰<br />
* libglusterfs<br />
* glusterfsd<br />
* booter<br />
* glusterfs<br />
* mod_gluster for apache/lighttpd 甚至支持 DAV<br /></p>

<p>各司其职，每个模块功能都做到极致</p>

<p>2 支持多种 signal 控制<br />
 object dump<br />
 latency 评测<br />
 崩溃后会输出 backtrace(有可能不准确)<br />
 log rotate<br />
功能不是很突出，但是这种编程、思维模式很好。<br /></p>

<p>3 其 Translators 概念非常不错<br />
   号称实现了所有 filesystem operations, 内部有一个比VFS更精细的树状结构:<br />
   cluster/afr 貌似支持 raid1<br />
   type cluster/unify<br />
   type cluster/stripe<br />
   type cluster/dht<br /></p>

<p>都是很有价值的功能<br /></p>

<p>这是我最喜欢的分布式文件系统实现，缺点是卷的配置是固定的，动态添加节点应该是不可能的(至少得改变父节点的配置文件)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式文件系统 Ceph]]></title>
    <link href="http://log.heartoutside.com/blog/2010/06/11/distributed-file-system-ceph/"/>
    <updated>2010-06-11T09:46:00+08:00</updated>
    <id>http://log.heartoutside.com/blog/2010/06/11/distributed-file-system-ceph</id>
    <content type="html"><![CDATA[<p>Ceph 的<a href="http://ceph.newdream.net/about/">优点</a>写 得很突出
* Striping
* dynamic Meta Server
* object  storage ?</p>

<p>07 年就开始发布paper了，<a href="http://www.newdream.net/%7Esage/">作者</a>貌似只有一人，06 年的Phd毕业生。<br />
系统好像依赖 btrfs, 有人说 btrfs 没有达到 product  级别，Ceph 作者也<a href="http://ceph.newdream.net/2010/05/linux-v2-6-34-is-out/">坦承</a>：</p>

<blockquote><p>Please note, however, that Ceph is still  <strong>experimental</strong> and is not yet ready for use in a production environment.</p></blockquote>

<p>因为Ceph依赖文件系统，搭建测试会比较费劲<br />
我在初步阅读了服务器端的代码，C++实现, 代码量很大，感觉写得很丑陋，直觉就是不想测试这个分布式系统了。</p>

<p>我没有阅读已经进入 Kernel 的Ceph Client 的代码。</p>

<p>doc<br />
<a href="http://www.ibm.com/developerworks/linux/library/l-ceph/index.html" target="_blank">http://www.ibm.com/developerworks/linux/library/l-ceph/index.html</a><br />
<a href="http://ceph.newdream.net/about/" target="_blank">http://ceph.newdream.net/about/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sector/Sphere Review]]></title>
    <link href="http://log.heartoutside.com/blog/2010/06/09/sector-sphere-review/"/>
    <updated>2010-06-09T09:36:00+08:00</updated>
    <id>http://log.heartoutside.com/blog/2010/06/09/sector-sphere-review</id>
    <content type="html"><![CDATA[<p>Sector/Sphere 是一个分布并行计算系统，用来存储、计算天文信息。Sector 是文件系统，Sphere 是并行计算平台。<br />
其<a href="http://sector.sourceforge.net/benchmark.html">性能</a>超过了 Hadoop 一倍多。性能评测结果 <br />
其分布指分布在几个州的 rack，使用 udt 通讯。<br /></p>

<h2>特性</h2>

<ul>
<li>Master 能多份，好像得手工同步一些信息。
Master和Node能随时添加、删除</li>
<li>Sector automatically replicates files to different nodes to provide high reliability and availability. In addition, this strategy favors read-intensive scenarios since clients can read from different replicas.</li>
<li>不对大文件切分，但是每个 dataset 还是可以由多个物理文件组成，切分是application的职责。</li>
<li>流量：When Sector is running on 120 nodes, the aggregate network IO is greater than 60 Gb/s, while for Hadoop the number is only 15 Gb/s.</li>
</ul>


<p>开发了 3 年，开始并没有模仿 GFS，HDFS 等。发布了一些 Paper，最近一次发布在 2 月，SVN 在几天前也有更新。作者貌似是一个中国人。</p>

<h2>其他</h2>

<p>有 Python,Java binding<br />
测试代码较少，几乎没有<br />
C++，有严重 Java 痕迹，不算优雅，结构还过得去，能写成这样已算不错。<br />
不能跨平台<br />
有 fuse 实现<br />
管理工具可能比较少</p>
]]></content>
  </entry>
  
</feed>
