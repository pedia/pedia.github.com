<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sigslot | HeartOutside]]></title>
  <link href="http://log.heartoutside.com/blog/categories/sigslot/atom.xml" rel="self"/>
  <link href="http://log.heartoutside.com/"/>
  <updated>2012-05-11T11:18:46+08:00</updated>
  <id>http://log.heartoutside.com/</id>
  <author>
    <name><![CDATA[Ken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Great library: sigslot]]></title>
    <link href="http://log.heartoutside.com/blog/2007/02/13/great-library-sigslot/"/>
    <updated>2007-02-13T12:48:00+08:00</updated>
    <id>http://log.heartoutside.com/blog/2007/02/13/great-library-sigslot</id>
    <content type="html"><![CDATA[<p>写了一些程序后，发现有很多有价值并且可以重用的库或者 class，使用这些久经考验的代码对 RAD 很有帮助。拿出来和大家分享一下。</p>

<ul>
<li>出处：<a href="http://sigslot.sourceforge.net">http://sigslot.sourceforge.net</a></li>
<li>用处：实现消息订阅和发送模式。</li>
</ul>


<p>``` c++ sigslot 示例
struct dog {
  signal1 bark; // 狗叫，需要发送，以便主人处理
  void starvation() {</p>

<pre><code> bark(100); // 消息产生
</code></pre>

<p>  }
};</p>

<p>struct human : public has_slots {
   void dog_bark(int vol) {</p>

<pre><code>// feed it
</code></pre>

<p>   }
};</p>

<p>int main() {
   dog d;
   human man;
   d.bark.connect(&amp;man, &amp;human::dog_bark); // 绑定</p>

<p>   d.starvation();</p>

<p>   d.bark.disconnect(&amp;man);
   return 0;
}
```</p>

<ul>
<li>说明：当然 sigslot 的功能比例子远为强大，并且能支持多线程。这个库只有一个.h文件！用起来非常方便。</li>
</ul>


<p>boost 也有自己的signals库，用法比较类似，优点是能支持返回值，更加强大。
如果说有缺点就是引用了 boost 很多其他的库。</p>
]]></content>
  </entry>
  
</feed>
