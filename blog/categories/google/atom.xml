<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google | heartoutside]]></title>
  <link href="http://blog.heartoutside.com/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://blog.heartoutside.com/"/>
  <updated>2012-04-20T18:52:16+08:00</updated>
  <id>http://blog.heartoutside.com/</id>
  <author>
    <name><![CDATA[Ken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WHY COM?]]></title>
    <link href="http://blog.heartoutside.com/blog/2007/06/01/why-com/"/>
    <updated>2007-06-01T13:03:00+08:00</updated>
    <id>http://blog.heartoutside.com/blog/2007/06/01/why-com</id>
    <content type="html"><![CDATA[<p>为何很多大型程序都使用了COM?</p>

<p>COM 对程序有什么价值?</p>

<p>使用了COM作为框架的程序:</p>

<ul>
<li>Firefox, <a href="http://lxr.mozilla.org/seamonkey/find?string=idl">搜索idl</a>能找到很多文件，并且实现了跨平台的<a href="http://www.mozilla.org/projects/xpcom/">XPCOM</a>,非常优秀的程序。</li>
<li>IE, 自然使用了Window平台内置的COM</li>
</ul>


<p>我的机器上安装了一些Google的程序，我查看了一下：</p>

<ul>
<li><p>common/update/:<br />
<a href="http://boostguy.googlepages.com/goopdate.idl">goopdate.idl</a> <br />
<a href="http://boostguy.googlepages.com/UpdaterService.idl">UpdaterService.idl</a></p></li>
<li><p>Google Desktop Search/:<br />
<a href="http://boostguy.googlepages.com/GoogleDesktopActions.idl"></a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopActions.idl"></a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopActions.idl">GoogleDesktopActions.idl</a><br />
<a href="http://boostguy.googlepages.com/GoogleDeskband.idl">GoogleDeskband.idl</a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopAPI2.idl">GoogleDesktopAPI2.idl</a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopDisplay.idl">GoogleDesktopDisplay.idl</a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopIndex.idl">GoogleDesktopIndex.IDL</a><br />
<a href="http://boostguy.googlepages.com/GoogleDesktopSSD.idl">GoogleDesktopSSD.IDL</a><br />
<a href="http://boostguy.googlepages.com/GoogleUIEngine.idl">GoogleUIEngine.IDL</a><br /></p></li>
<li><p>Google Earth<br />
<a href="http://boostguy.googlepages.com/googleearth.idl">googleearth.IDL</a></p></li>
<li><p>Google Talk<br />
<a href="http://boostguy.googlepages.com/googletalk.idl">googletalk.IDL</a><br />
<a href="http://boostguy.googlepages.com/swg.idl">swg.IDL</a></p></li>
<li>Google Toolbar<br />
<a href="http://boostguy.googlepages.com/googletoolbar3.idl">googletoolbar3.IDL</a></li>
<li>RealPlayer SDK<br />
<a href="http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=IRMAPlayer&amp;btnG=Search">IRMAPlayer</a></li>
</ul>


<p>有必要说明的是很多程序为了和IE，Shell交互必须使用COM实现一些接口，如 Google Toolbar，但是有些程序为了暴露API給开发者也使用了COM,如GoolgeTalk, RealPlayerSDK,MSN等。</p>

<p>编写小程序的确不应该用COM，依赖注册表，还有TypeLibrary等问题，的确不划算。但是有复杂进程通讯，复杂界面和逻辑交互的程序使用COM的确有不少好处：</p>

<ul>
<li>几乎能在任何需要的地方方便的得到任何需要的对象。避免使用可耻的全局变量。</li>
<li>不用担心对象生存期和泄露问题，COM内置的引用计数解决了这个问题，当然接口泄露也会开始折磨程序员。</li>
<li>接口定义是强制性的了。</li>
</ul>


<p>我个人倾向于使用COM，但是应该避免使用注册表，复杂的ConnectionPoint等技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Googler use c++?]]></title>
    <link href="http://blog.heartoutside.com/blog/2007/02/27/googler-use-cplusplus/"/>
    <updated>2007-02-27T21:41:00+08:00</updated>
    <id>http://blog.heartoutside.com/blog/2007/02/27/googler-use-cplusplus</id>
    <content type="html"><![CDATA[<p>最近发现<a href="http://code.google.com/hosting/">Google code</a>上多了<a href="http://code.google.com/hosting/search?q=label%3AGoogle+&amp;btn=Search+Projects">好多</a>Google的开源项目，比较有意思的项目有：</p>

<p><a href="http://code.google.com/p/airbag/">airbag - Crash reporting</a></p>

<p>An open-source multi-platform crash reporting system</p>

<p>exception_handler能在Windows下生成dmp文件，processor 能直接分析出崩溃地址详细信息：</p>

<p>```
Crash reason:  EXCEPTION_ACCESS_VIOLATION</p>

<p>Crash address: 0x45</p>

<p>Thread 0 (crashed)
0  test_app.exe!`anonymous namespace'::CrashFunction [test_app.cc : 58 + 0x3]
1  test_app.exe!main [test_app.cc : 65 + 0x4]
2  test_app.exe!__tmainCRTStartup [crt0.c : 327 + 0x11]
3  kernel32.dll!BaseProcessStart + 0x22
```</p>

<p>注意：processor 并不依赖Windows就能识别dmp文件格式，非常适合于在服务器上做自动分析，然后生成报表。</p>

<ul>
<li><a href="http://code.google.com/p/google-gen/">google-gen - A system for learning generative models of relational data.</a></li>
</ul>


<p>这样的项目都能开源，太有意思了。真是目标远大</p>

<ul>
<li><a href="http://code.google.com/p/google-ctemplate/">google-ctemplate - A simple but powerful template language for C++</a></li>
</ul>


<p>我估计(感觉而已)Google的搜索结果不是用这套代码实现的。模版功能非常强。</p>

<ul>
<li><a href="http://code.google.com/p/gnscd/">gnscd - New nscd daemon</a></li>
</ul>


<p>不知道干什么用的。</p>

<ul>
<li><a href="http://code.google.com/p/libjingle/">libjingle - Google Talk Voice, File Sharing, and P2P Interoperability Library</a></li>
</ul>


<p>Gtalk的核心，代码写得非常不错，但是有过度设计之嫌。</p>

<ul>
<li><p><a href="http://code.google.com/p/gpo/">gpo - Google Pose Optimizer</a></p></li>
<li><p><a href="http://code.google.com/p/google-perftools/">google-perftools</a></p></li>
</ul>


<p>Fast, mutli-threaded malloc() and nifty performance analysis tools</p>

<ul>
<li><p><a href="http://code.google.com/p/google-sparsehash/">google-sparsehash - An extremely memory-efficient hash_map implementation</a></p>

<p>sparsehash 支持两种模式：效率优先，内存占用优先。</p></li>
<li><p><a href="http://code.google.com/p/google-oaf/">google-oaf - Google Open Automation Framework</a></p></li>
</ul>


<p>没有刻意去找寻Google的所有开源项目，但是发现使用C++要多一些，并且大都很重的使用了STL，没有使用<a href="http://www.boost.org/">Boost</a>,
但是几个项目(google-breakpad, ctemplate)都实现了<a href="www.boost.org/libs/smart_ptr/scoped_ptr.htm">scoped_ptr</a>，也直接使用了</p>

<p>``` c++</p>

<h1>include <hash></h1>

<p>```</p>

<p>在Bjarne Stroustrup's homepage上有这么句话</p>

<blockquote><p><a href="http://www.research.att.com/~bs/">February 21: Google (Mountainview): "Initalization in C++0x".</a></p></blockquote>

<p>似乎Google 请 Bjarne Stroustrup 去 talk，可见 Google 对 C++ 的重视程度。</p>

<p>个人认为：Google做出了一个代表，<strong>应用开发的首选语言应该是C++，而不是C</strong>。</p>
]]></content>
  </entry>
  
</feed>
