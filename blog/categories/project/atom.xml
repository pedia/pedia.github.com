<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project | HeartOutside]]></title>
  <link href="http://log.heartoutside.com/blog/categories/project/atom.xml" rel="self"/>
  <link href="http://log.heartoutside.com/"/>
  <updated>2012-05-11T11:18:46+08:00</updated>
  <id>http://log.heartoutside.com/</id>
  <author>
    <name><![CDATA[Ken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[公司内部代码协作]]></title>
    <link href="http://log.heartoutside.com/blog/2012/05/02/collaboration-in-corp/"/>
    <updated>2012-05-02T10:58:00+08:00</updated>
    <id>http://log.heartoutside.com/blog/2012/05/02/collaboration-in-corp</id>
    <content type="html"><![CDATA[<p>公司内部，团队间不可避免的有代码互相访问的事情发生。</p>

<h2>普通方式</h2>

<p>提供者提供头文件和库供调用者实施访问，这是比较常见的方式。当然库有可能是静态库，动态库。</p>

<p>静态库要求双方编译环境，运行环境一致，否则就得提供多种环境的库文件。动态库要求稍微弱一些而已。</p>

<p>很多人会把别人的头文件进行封装，美其名曰为了<strong>屏蔽变化</strong>，虽说封装开销微乎其微，但是我尤其讨厌这么做。
这种事情甚至会出现在一个团队内的两个人间，一般这两人可能是独立设计。这是缺乏信任、沟通的结果。</p>

<p>如果只提供二进制，看不到代码，又不是经济方面的原因，那么这种公司可以离开了。</p>

<p>如果出现数次使用邮件、聊天软件传文件等方式交流代码，也无力改变，这种公司也可以考虑离开。</p>

<h2>远程调用</h2>

<p>提供者可以只提供 IDL 文件。
取决于远程调用的使用、部署方式等。工程间的依赖、接口的变更这都是需要解决的问题。</p>

<p>也可以进一步提供封装过服务发现、调用方式、错误处理等后的库。问题就和<strong>普通方式</strong>一致了。</p>

<h2>直接使用</h2>

<p>要求大家的代码在一颗代码树下，代码间能互相调用，工程间能引用。</p>

<p>假想公司内有个独立的防止 Spam 的小组，业务部门 Blog 需要使用他们的代码。
``` cpp spam/check.h</p>

<h1>ifndef SPAM_CHECK_H__</h1>

<p>namespace spam {</p>

<p>bool Check(const char* text);</p>

<p>}
```</p>

<p>该工程产生 libcheck.a</p>

<p>``` cpp blog/publish.cc</p>

<h1>include "spam/check.h"</h1>

<p>void Post(...) {
  if (spam::Check(text))</p>

<pre><code>return false;
</code></pre>

<p>  // ...
}
```</p>

<p>调用方的工程文件需要声明
<code>javascript blog/blog.gyp
  'dependencies' : ['spam.gyp:check'],
</code></p>

<p><a href="http://code.google.com/p/gyp">gyp</a> 为工程文件，最终生成 Makefile</p>

<p>Blog 编译时自动加入 -lcheck，一般静态链接发布。能如此做是有很多先决条件的：</p>

<ul>
<li><p>公司内一颗代码树，至少都拥有可读权限</p></li>
<li><p>每个团队间的代码不能互相影响，需要每个团队都得采用分支开发，保证主线是稳定，可发布版本</p></li>
<li><p>信息是开放的，每个团队的代码的变更其他团队应该能知道</p></li>
<li><p>公司内部有统一的良好的沟通工具，如 IRC, 邮件列表等</p></li>
</ul>


<p>还有其他规范，如</p>

<ul>
<li><p>统一的代码风格</p></li>
<li><p>目录规则、namespace 规则、冲突解决等。</p></li>
</ul>


<p>如果是远程调用，大致可以拆解为：服务发现、调用包装、错误处理等子项，每个子项也可以同理解决。</p>

<p>很多公司把代码的权限管理得相当不错，虽然我也能遵守，但是通常呢？</p>

<blockquote><p> 有能力的人不太在乎那些个代码，没有能力的呢？通常可能都玩不转那些个代码<br/>
 连Google都是内部开放代码，有什么理由制造层层障碍。这种公司也不值得留下。</p></blockquote>

<p>限制创造力的规则。</p>
]]></content>
  </entry>
  
</feed>
